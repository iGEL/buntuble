#!/usr/bin/env python3

import json
import subprocess

def run_command(command):
    """Run a shell command and return the output."""
    return subprocess.check_output(command, shell=True, text=True).strip()

def set_screen(screen, mode=None, pos=None, scale=None):
    """Configure screen settings using swaymsg."""
    cmd = f"swaymsg output {screen}"
    if mode:
        cmd += f" mode {mode}"
    if pos:
        cmd += f" pos {pos}"
    if scale:
        cmd += f" scale {scale}"
    subprocess.run(cmd, shell=True)

def set_keybinding(primary, secondary):
    """Set keybindings for moving workspaces between outputs."""
    subprocess.run(f"swaymsg bindsym Mod4+w move workspace to output {primary}", shell=True)
    subprocess.run(f"swaymsg bindsym Mod4+e move workspace to output {secondary}", shell=True)

def main():
    # Get output information from sway
    outputs = json.loads(run_command("swaymsg -t get_outputs"))

    # Exit if only one output is detected
    if len(outputs) == 1:
        return

    # Identify external monitor (exclude eDP-1)
    external_monitor = next(output for output in outputs if output["name"] != "eDP-1")

    # Configure screens based on the external monitor model
    if external_monitor["model"] == "Smart M70D":
        set_screen(external_monitor["name"], mode="3840x2160", pos="0 0", scale="1.5")
        set_screen("eDP-1", pos="960 2160")
    elif external_monitor["model"] == "U28E590" or external_monitor["model"] == "LG UltraFine":
        set_screen(external_monitor["name"], mode="3840x2160", pos="0 0", scale="1.75")
        set_screen("eDP-1", pos="960 2160")
    else:
        set_screen("eDP-1", pos="0 0")
        set_screen(external_monitor["name"], pos="1920 0")

    # Set keybindings for workspace movement
    set_keybinding(primary=external_monitor["name"], secondary="eDP-1")

if __name__ == "__main__":
    main()

